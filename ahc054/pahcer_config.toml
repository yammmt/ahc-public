[general]
version = "0.3.1"

[problem]
problem_name = "ahc054"
objective = "Max"
score_regex = '(?m)^\s*Score\s*=\s*(?P<score>\d+)\s*$'

[test]
start_seed = 0
end_seed = 100
threads = 0
out_dir = "./pahcer"

# ==============================
#         COMPILE STEPS
# ==============================

# Compile the user's program
[[test.compile_steps]]
program = "cargo"
args = ["build", "--release"]

# Remove the old binary
[[test.compile_steps]]
program = "rm"
args = ["-rf", "./ahc054"]

# Move the compiled binary to the current directory
[[test.compile_steps]]
program = "cp"
args = ["../target/release/a", "./ahc054"]

# On macOS, there’s a possibility of SIGKILL or other issues occurring, 
# so it’s better to build the tester in advance
# rather than running it with cargo run every time.

# Compile the tester
[[test.compile_steps]]
program = "cargo"
args = ["build", "--release", "--bin", "tester"]
current_dir = "./tools"

# Remove the old tester
[[test.compile_steps]]
program = "rm"
args = ["-f", "./tester"]

# Move the tester to the current directory
[[test.compile_steps]]
program = "cp"
args = ["../target/release/tester", "./tester"]

# ==============================
#           TEST STEPS
# ==============================

# Run the tester with the user's program
[[test.test_steps]]
program = "./tester"
args = ["./ahc054"]
stdin = "./tools/in/{SEED04}.txt"
stdout = "./tools/out/{SEED04}.txt"
stderr = "./tools/err/{SEED04}.txt"
measure_time = true

